apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
}

////打jar包，包含assets文件
//task makeJar(type: Jar, dependsOn:['build']) {
//    from file('build/intermediates/classes/release')
//    from fileTree(dir: 'src/main', includes: ['assets/**'])
//    //目标文件名称
//    archiveName = 'un_proguard.jar'
//    destinationDir = file('build/libs')
//    exclude "com/cool/makejarlib/utils/BuildConfig.class"
//    exclude "com/cool/makejarlib/utils/BuildConfig\$*.class"
//    exclude "**/R.class"
//    exclude "**/R\$*.class"
//    //只导入资源路径集下的部分资源
//    include "com/cool/makejarlib/utils/**/*.class"
//    include "assets/**"
//}

task makeJar(type: Jar, dependsOn: ['build']) {
    delete('build/libs/un_proguard.jar')
    from file('build/intermediates/classes/release')
    //目标文件名称
    archiveName = 'myJar.jar'
    destinationDir = file('build/libs')
    exclude "com/cool/makejarlib/utils/BuildConfig.class"
    exclude "com/cool/makejarlib/utils/BuildConfig\$*.class"
    exclude "**/R.class"
    exclude "**/R\$*.class"
    //只导入资源路径集下的部分资源
    include "com/cool/makejarlib/utils/**/*.class"
}

//task makeJar(type: org.gradle.api.tasks.Copy) {
//    delete 'build/libs/makeJar.jar'
//    from('build/intermediates/bundles/release/')
//    into('build/libs/')
//    include('classes.jar')
//    rename('classes.jar','makeJar.jar')
//}
//
//makeJar.dependsOn(build)

//dependsOn 可根据实际需要增加或更改
//task buildJar(dependsOn: ['build'], type: Jar) {
//
//    appendix = "demo"
//    baseName = "androidJar"
//    version = "1.0.0"
//    classifier = "release"
//
//    //后缀名
//    extension = "jar"
//    //最终的 Jar 包名，如果没设置，默认为 [baseName]-[appendix]-[version]-[classifier].[extension]
//    archiveName = "myUtils.jar"
//
//    //需打包的资源所在的路径集
//    def srcClassDir = [project.buildDir.absolutePath + "/intermediates/classes/release"];
//    //初始化资源路径集
//    from srcClassDir
//
//    //去除路径集下部分的资源
////    exclude "org/chaos/demo/jar/MainActivity.class"
////    exclude "org/chaos/demo/jar/MainActivity\$*.class"
//    exclude "org/chaos/demo/jar/BuildConfig.class"
//    exclude "org/chaos/demo/jar/BuildConfig\$*.class"
//    exclude "**/R.class"
//    exclude "**/R\$*.class"
//
//    //只导入资源路径集下的部分资源
//    //com.cool.makejarlib.utils
//    include "com/cool/makejarlib/utils/**/*.class"
//
//    //注: exclude include 支持可变长参数
//}


//task proguardJar(dependsOn: ['buildJar'], type: proguard.gradle.ProGuardTask) {
//    //Android 默认的 proguard 文件
//    configuration android.getDefaultProguardFile('proguard-android.txt')
//    //会根据该文件对 Jar 进行混淆，注意：需要在 manifest 注册的组件也要加入该文件中
//    configuration 'proguard-rules.pro'
//
//    String inJar = buildJar.archivePath.getAbsolutePath()
//    //输入 jar
//    injars inJar
//    //输出 jar
//    outjars ("mylib") + "/proguard-${buildJar.archiveName}"
//
//    //设置不删除未引用的资源(类，方法等)
//    dontshrink
//
//    AppPlugin appPlugin = getPlugins().findPlugin(AppPlugin)
//    if (appPlugin != null) {
//        List<String> runtimeJarList
//        if (appPlugin.getMetaClass().getMetaMethod("getRuntimeJarList")) {
//            runtimeJarList = appPlugin.getRuntimeJarList()
//        } else if (android.getMetaClass().getMetaMethod("getBootClasspath")) {
//            runtimeJarList = android.getBootClasspath()
//        } else {
//            runtimeJarList = appPlugin.getBootClasspath()
//        }
//
//        for (String runtimeJar : runtimeJarList) {
//            //给 proguard 添加 runtime
//            libraryjars(runtimeJar)
//        }
//    }
//}